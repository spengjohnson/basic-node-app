{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 1. What is a Node module? \
\
A node module is a set of functions to include in your app, like a library with pieces of reusable code. You can use modules in other files by using module.export within the file that contains it, and then \'93requiring\'94 it in the file that you\'92d like to use it in. \
\
2. What is the main difference between exports and module.exports? \
\
module.exports is the object that is returned from require() and is an empty object by default. Therefore, it can be reassigned to anything. We can add methods and variables directly to it. Exports is only a reference to module.exports and doesn\'92t return anything. It is a way to write less code. You can use it to reference what you\'92ve used in module.exports. If you want to make sure your module is a specific object type, you can just use module.exports, otherwise use exports only. \
\
3. Why is using exports recommended? \
\
Exports can be useful to the developer who is aiming to write a little less code. It is useful because you can reference the information you\'92ve entered in module.exports in order to do that. }